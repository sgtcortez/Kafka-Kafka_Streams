/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package br.com.techtalk;

import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;

import java.util.Properties;
import java.util.concurrent.CountDownLatch;

@Slf4j
public class App {

    private static final String KAFKA_HOST = "localhost:9092";

    private static Properties streamProperties() {
        final var properties = new Properties();
        // this will be the consumer id
        properties.put(StreamsConfig.APPLICATION_ID_CONFIG, "tech-talk");
        properties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, KAFKA_HOST);
        properties.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
        properties.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());
        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        return properties;
    }


    public static void main(String[] args) {

        final var builder = new StreamsBuilder();

        new StreamApplication(builder);

        final var topology = builder.build();
        final var streams = new KafkaStreams(topology, streamProperties());

        // Clean local state stores everytime that the application starts
        // usually in /tmp/kafka-streams
        streams.cleanUp();

        final var latch = new CountDownLatch(1);

        // attach shutdown handler to catch control-c
        Runtime.getRuntime().addShutdownHook(new Thread("streams-shutdown-hook") {
            @Override
            public void run() {
                streams.close();
                latch.countDown();
            }
        });

        try {
            streams.start();
            latch.await();
        } catch (Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}
